{"version":3,"sources":["hooks/use-window-dimensions.js","components/dots/dots.jsx","components/slider/slider.jsx","components/tabs-item/tabs-item.jsx","components/services/services.jsx"],"names":["getWindowDimensions","window","width","innerWidth","height","innerHeight","useWindowDimensions","useState","windowDimensions","setWindowDimensions","useEffect","handleResize","addEventListener","removeEventListener","Dots","className","slides","active","map","_","index","MemoCarousel","memo","Carousel","Slider","option","onChange","activeItem","dotClassName","showStatus","showArrows","showIndicators","showThumbs","infiniteLoop","swipeable","emulateTouch","selectedItem","TabsItem","id","tab","activeIndex","onTabClick","type","aria-label","onClick","Services","isWebp","activeTab","setActiveTab","isDesktop","WindowWidth","DESKTOP","services","SERVICES","promo","title","list","item","description","link","href","getServices","handleTabChange","target","Object","values","TabNames","i","servicesSliderOptions"],"mappings":"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","file":"static/js/services.78db5686.chunk.js","sourcesContent":["import {useState, useEffect} from 'react';\r\n\r\nconst getWindowDimensions = () => {\r\n  const {innerWidth: width, innerHeight: height} = window;\r\n\r\n  return {\r\n    width,\r\n    height\r\n  };\r\n};\r\n\r\nconst useWindowDimensions = () => {\r\n  const [windowDimensions, setWindowDimensions] = useState(getWindowDimensions());\r\n\r\n  useEffect(() => {\r\n    const handleResize = () => {\r\n      setWindowDimensions(getWindowDimensions());\r\n    };\r\n\r\n    window.addEventListener('resize', handleResize);\r\n    return () => window.removeEventListener('resize', handleResize);\r\n  }, []);\r\n\r\n  return windowDimensions;\r\n};\r\n\r\nexport default useWindowDimensions;\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Dots = ({className, slides, active}) => {\n  return (\n    <ul className={`${className}__dots dots`}>\n      {slides.map((_, index) => {\n        return (\n          <li\n            className={`dots__dot${index === active ? ` dots__dot--active` : ``}`}\n            key={`dot-${index}`}\n          />\n        );\n      })}\n    </ul>\n  );\n};\n\nDots.propTypes = {\n  className: PropTypes.string.isRequired,\n  slides: PropTypes.arrayOf(PropTypes.object.isRequired).isRequired,\n  active: PropTypes.number.isRequired,\n};\n\nexport default Dots;\n","import React, {memo} from 'react';\nimport PropTypes from 'prop-types';\nimport Dots from '../dots/dots';\nimport {Carousel} from 'react-responsive-carousel';\nimport 'react-responsive-carousel/lib/styles/carousel.min.css';\n\nconst MemoCarousel = memo(Carousel);\n\nconst Slider = ({option, slides, onChange, activeItem, dotClassName}) => {\n  return (\n    <>\n      <MemoCarousel\n        {...option}\n        showStatus={false}\n        showArrows={false}\n        showIndicators={false}\n        showThumbs={false}\n        infiniteLoop={true}\n        swipeable={true}\n        emulateTouch={true}\n        selectedItem={activeItem}\n        onChange={onChange}\n      >\n        {slides}\n      </MemoCarousel>\n\n      <Dots\n        className={dotClassName}\n        slides={slides}\n        active={activeItem}\n      />\n    </>\n  );\n};\n\nSlider.propTypes = {\n  option: PropTypes.object.isRequired,\n  slides: PropTypes.arrayOf(\n    PropTypes.object.isRequired\n  ).isRequired,\n  onChange: PropTypes.func.isRequired,\n  activeItem: PropTypes.number.isRequired,\n  dotClassName: PropTypes.string.isRequired,\n};\n\nexport default Slider;\n","import React from \"react\";\nimport PropTypes from 'prop-types';\n\nconst TabsItem = ({id, tab, activeIndex, className, onTabClick}) => {\n  return (\n    <li className=\"tabs__item\">\n      <button\n        className={`tabs__button tabs__button${className} ${activeIndex === id ? `tabs__button--active` : ``}`}\n        id={id}\n        type=\"button\"\n        aria-label={`Показать ${tab}`}\n        onClick={onTabClick}\n      >\n        {tab}\n      </button>\n    </li>\n  );\n};\n\nTabsItem.propTypes = {\n  id: PropTypes.number.isRequired,\n  tab: PropTypes.string.isRequired,\n  activeIndex: PropTypes.number.isRequired,\n  className: PropTypes.string.isRequired,\n  onTabClick: PropTypes.func.isRequired,\n};\n\nexport default TabsItem;\n","import React, {useState} from 'react';\nimport PropTypes from 'prop-types';\nimport useWindowDimensions from '../../hooks/use-window-dimensions';\nimport TabsItem from '../tabs-item/tabs-item';\nimport Slider from '../slider/slider';\nimport {SERVICES, TabNames, WindowWidth, servicesSliderOptions} from '../../const';\n\nconst getServices = (isWebp) => {\n  return SERVICES.map((promo) => {\n    return (\n      <div key={promo} className={`services__card-service card-service card-service${promo.className}${isWebp ? `-webp` : ``} container`}>\n        <h2 className={`card-service__title card-service__title${promo.className}`}>{promo.title}</h2>\n        <ul className={`card-service__list card-service__list${promo.className}`}>\n          {\n            promo.list.map((item) =>\n              <li key={item} className=\"card-service__item\">\n                {item}\n              </li>\n            )\n          }\n        </ul>\n        {promo.description}\n        {\n          promo.link &&\n          <a className={`card-service__link card-service__link${promo.className}`} href={promo.link.href}>\n            {promo.link.title}\n          </a>\n        }\n      </div>\n    );\n  });\n};\n\nconst Services = ({isWebp}) => {\n  const [activeTab, setActiveTab] = useState(0);\n\n  const {width} = useWindowDimensions();\n\n  const isDesktop = width > WindowWidth.DESKTOP;\n  const services = getServices(isWebp);\n\n  const handleTabChange = (tab) => {\n    if (tab.target) {\n      setActiveTab(+tab.target.id );\n      return;\n    }\n\n    setActiveTab(tab);\n  };\n\n  return (\n    <section className=\"main__services services\">\n      <h2 className=\"visually-hidden\">Предоставляемые услуги</h2>\n      {\n        isDesktop ?\n          <div className=\"services__tabs tabs\">\n            <ul className=\"tabs__list\">\n              {Object.values(TabNames).map((tab, i) =>\n                <TabsItem\n                  key={`${i}-${tab}`}\n                  id={i}\n                  tab={tab}\n                  activeIndex={activeTab}\n                  className={SERVICES[i].className}\n                  onTabClick={handleTabChange} />\n              )}\n            </ul>\n\n            {services[activeTab]}\n          </div>\n          :\n          <Slider\n            option={servicesSliderOptions}\n            slides={services}\n            onChange={handleTabChange}\n            activeItem={activeTab}\n            dotClassName={`services`}\n          />\n      }\n    </section>\n  );\n};\n\nServices.propTypes = {\n  isWebp: PropTypes.bool.isRequired,\n};\n\nexport default Services;\n"],"sourceRoot":""}